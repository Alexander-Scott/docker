name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: image

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          FOLDERS=$(ls -d */)
          for FOLDER in $FOLDERS; do
            pushd $FOLDER
              if [ -f docker-compose.test.yml ]; then
                docker-compose --file docker-compose.test.yml build
              elif [ -f Dockerfile ]; then
                echo "Skipping tests for $FOLDER/Dockerfile."
              fi
            popd
          done

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  build-linux-amd64:
    needs: test

    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["pypy3"]

    steps:
      - uses: actions/checkout@v2

      - uses: "actions/setup-python@v2"
        with:
          python-version: "${{ matrix.python-version }}"

      - name: Log into GitHub Container Registry
        run: echo "${{ secrets.CR_PAT }}" | docker login https://docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Build and Push image to GitHub Container Registry
        env:
          DOCKERFILE_SUFFIX: ""
          GITHUB_REF: ${{ github.ref }}
          GITHUB_REPO: ${{ github.repository }}
          PLATFORM: ""
        run: |
          FOLDERS=$(ls -d */)
          for FOLDER in $FOLDERS; do
            pushd $FOLDER
              IMAGE_NAME=$(echo $FOLDER | sed -e "s,/,,g")$DOCKERFILE_SUFFIX
              if [ -f Dockerfile$DOCKERFILE_SUFFIX ]; then

                docker build . --file Dockerfile$DOCKERFILE_SUFFIX ${PLATFORM} --tag $IMAGE_NAME

                IMAGE_ID=docker.pkg.github.com/"${GITHUB_REPO}"/$IMAGE_NAME

                IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

                # Strip git ref prefix from version
                VERSION=$(echo "${GITHUB_REF}" | sed -e 's,.*/\(.*\),\1,')

                # Strip "v" prefix from tag name
                [[ "${GITHUB_REF}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

                # Use Docker `latest` tag convention
                [ "$VERSION" == "master" ] && VERSION=latest

                echo IMAGE_ID=$IMAGE_ID
                echo VERSION=$VERSION

                docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
                docker push $IMAGE_ID:$VERSION

                if [[ $VERSION == "latest" || $VERSION == "merge" ]]; then
                  COMMAND=$(echo $FOLDER | sed -e "s,/,,g")

                  TOOL_VERSION=$($(echo $COMMAND --version) | grep -i $COMMAND | sed -e "s/[^0-9]*\([0-9.]\+\).*/\1/g")
                  TOOL_VERSION="${TOOL_VERSION:-latest}"
                  echo TOOL_VERSION=$TOOL_VERSION

                  docker tag $IMAGE_NAME $IMAGE_ID:$TOOL_VERSION
                  docker push $IMAGE_ID:$TOOL_VERSION
                fi
              fi
            popd
          done
  
  build-linux-arm64:
    name: Build & push linux/arm64
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/arm64]
    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm64

      - name: Log into GitHub Container Registry
        run: echo "${{ secrets.CR_PAT }}" | docker login https://docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Build and Push image to GitHub Container Registry
        env:
          DOCKERFILE_SUFFIX: -arm64
          GITHUB_REF: ${{ github.ref }}
          GITHUB_REPO: ${{ github.repository }}
          PLATFORM: --platform=${{ matrix.platform }}
        run: |
          FOLDERS=$(ls -d */)
          for FOLDER in $FOLDERS; do
            pushd $FOLDER
              IMAGE_NAME=$(echo $FOLDER | sed -e "s,/,,g")$DOCKERFILE_SUFFIX
              if [ -f Dockerfile$DOCKERFILE_SUFFIX ]; then

                docker build . --file Dockerfile$DOCKERFILE_SUFFIX ${PLATFORM} --tag $IMAGE_NAME

                IMAGE_ID=docker.pkg.github.com/"${GITHUB_REPO}"/$IMAGE_NAME

                IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

                # Strip git ref prefix from version
                VERSION=$(echo "${GITHUB_REF}" | sed -e 's,.*/\(.*\),\1,')

                # Strip "v" prefix from tag name
                [[ "${GITHUB_REF}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

                # Use Docker `latest` tag convention
                [ "$VERSION" == "master" ] && VERSION=latest

                echo IMAGE_ID=$IMAGE_ID
                echo VERSION=$VERSION

                docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
                docker push $IMAGE_ID:$VERSION

                if [[ $VERSION == "latest" || $VERSION == "merge" ]]; then
                  COMMAND=$(echo $FOLDER | sed -e "s,/,,g")

                  TOOL_VERSION=$($(echo $COMMAND --version) | grep -i $COMMAND | sed -e "s/[^0-9]*\([0-9.]\+\).*/\1/g")
                  TOOL_VERSION="${TOOL_VERSION:-latest}"
                  echo TOOL_VERSION=$TOOL_VERSION

                  docker tag $IMAGE_NAME $IMAGE_ID:$TOOL_VERSION
                  docker push $IMAGE_ID:$TOOL_VERSION
                fi
              fi
            popd
          done
