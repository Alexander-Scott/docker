name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: image

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          FOLDERS=$(ls -d */)
          for FOLDER in $FOLDERS; do
            pushd $FOLDER
              if [ -f docker-compose.test.yml ]; then
                docker-compose --file docker-compose.test.yml build
                docker-compose --file docker-compose.test.yml run sut
              elif [ -f Dockerfile ]; then
                docker build . --file Dockerfile
              fi
            popd
          done

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: |
          FOLDERS=$(ls -d */)
            for FOLDER in $FOLDERS; do
              pushd $FOLDER
                IMAGE_NAME=$(echo $FOLDER | sed -e "s,/,,g")
                if [ -f Dockerfile ]; then
                  docker build . --file Dockerfile --tag $IMAGE_NAME
                fi
              popd
            done

      - name: Log into GitHub Container Registry
        run: echo "${{ secrets.CR_PAT }}" | docker login https://docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image to GitHub Container Registry
        run: |
          FOLDERS=$(ls -d */)
            for FOLDER in $FOLDERS; do
              pushd $FOLDER
                IMAGE_NAME=$(echo $FOLDER | sed -e "s,/,,g")
                if [ -f Dockerfile ]; then
                  IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

                  IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

                  # Strip git ref prefix from version
                  VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

                  # Strip "v" prefix from tag name
                  [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

                  # Use Docker `latest` tag convention
                  [ "$VERSION" == "master" ] && VERSION=latest

                  echo IMAGE_ID=$IMAGE_ID
                  echo VERSION=$VERSION

                  docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
                  docker push $IMAGE_ID:$VERSION
                fi
              popd
            done
